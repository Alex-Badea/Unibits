------- TEMA 1--------
deadline : CEL TARZIU 22 martie

Sa se scrie un analizor lexical pentru un limbaj de programare la alegere cu ajutorul programului flex (sau flex++ sau jjlex). Fisierul de intrare pentru flex trebuie sa contina expresii regulate pentru:
- cuvinte cheie
- identificatori
- toate tipurile de constante permise de limbaj
- operatorii utilizati de limbaj
- delimitatori (de ex. ; ( ) etc., dar nu spatii, tab-uri, linie noua)
- comentariile permise de limbaj
Pentru fiecare tip de token, expresia regulata corespunzatoare trebuie sa aiba atasata un cod prin care se printeaza (intr-un fisier sau la consola) tipul token-ului (de ex ID, OPERATOR, COMMENT etc), sirul corespunzator din fisierul sursa scanat (de ex. pentru un ID "a23"), numarul liniei din fisierul sursa pe care se afla token-ul. Pentru comentariile care se scriu pe mai multe linii, scrieti prima si ultima linie a comentariului.
Testarea se face pentru un fisier sursa scris in limbajul de programare ales.

-------TEMA 2-----
deadline: CEL TARZIU 20 aprilie

Precizari: Din setul 2 de teme fiecare student va alege una singura. La temele 4, 5 si 6 pot lucra si doi studenti.

1. Sa se scrie un program care primeste la intrare elementele unei expresii regulate (alfabetul expresiei, expresia propriu -zisa (in forma prefixata sau infixata - adica forma naturala), care contine 3 tipuri de operatori: reuniune, concatenare si iteratie Kleene (*). Pentru modificarea prioritatii operatorilos se pot utiliza paranteze. Sa se determine un automat finit determinist (sa se afiseze elementele sale) care recunoaste acelasi limbaj ca cel descris de expresia regulata, folosind algoritmul de la curs. Programul afiseaza si graful care corespunde noului automat (grafic 1 punct).

2. Sa se scrie un program pentru implementarea algoritmului de analiza sintactica Cocke-Younger-Kasami. Programul primeste la intrare elementele unei gramatici independente de context in forma normala Chomsky. Programul accepta un numar oarecare de siruri peste alfabetul terminalilor. Pentru fiecare sir se creeaza si se afiseaza tabela cu sirurile de neterminali obtinute prin aplicarea algoritmului CYK si in cazul cand sirul respectiv este in limbajul generat de gramatica, se afiseaza derivarile sale care pleaca din simbolul de start.

3.Sa se scrie un program pentru implementarea algoritmului de analiza sintactica Earley. Programul primeste la intrare elementele unei gramatici independente de context oarecare, inclusiv cu lambda-productii. Programul accepta un numar oarecare de siruri peste alfabetul terminalilor. Pentru fiecare sir se creeaza si se afiseaza tabelele Earley corespondente si daca sirul apartine limbajului generat de gramatica, afiseaza derivarile acelui sir plecand din simbolul de start.

4.Sa se scrie un program care implementeaza algoritmul pentru gramatici LL(k) tari. Programul primeste la intrare: k>=1, elementele unei gramatici independente de context, nerecursiva la stanga, oarecare. Programul determina tabela de analiza sintactica asociata si decide daca gramatica data este LL(k). In caz afirmativ, programul permite citirea unui nr oarecare de siruri peste alfabetul terminalilor. Pentru fiecare sir terminal se determina, pe baza tabelei de analiza sintactica obtinuta, daca este in limbajul generat de gramatica respectiva iar in caz afirmativ se afiseaza derivarea sa stanga (o succesiune de numere, fiecare numar reprezintand numarul productiei aplicate).

5. Sa se scrie un program care implementeaza algoritmul pentru gramatici SLR(1). Programul primeste la intrare elementele unei gramatici independente de context oarecare. Programul determina tabela de analiza sintactica asociata si decide daca gramatica data este SLR(1). In caz afirmativ, programul permite citirea unui nr oarecare de siruri peste alfabetul terminalilor. Pentru fiecare sir terminal se determina, pe baza tabelei de analiza sintactica obtinuta, daca este in limbajul generat de gramatica respectiva iar in caz afirmativ se afiseaza derivarea sa dreapta (o succesiune de numere, fiecare numar reprezintand numarul productiei aplicate).

6. Sa se scrie un program care implementeaza algoritmul pentru gramatici LR(1). Programul primeste la intrare elementele unei gramatici independente de context oarecare. Programul determina tabela de analiza sintactica asociata si decide daca gramatica data este LR(1). In caz afirmativ, programul permite citirea unui nr oarecare de siruri peste alfabetul terminalilor. Pentru fiecare sir terminal se determina, pe baza tabelei de analiza sintactica obtinuta, daca este in limbajul generat de gramatica respectiva iar in caz afirmativ se afiseaza derivarea sa dreapta (o succesiune de numere, fiecare numar reprezintand numarul productiei aplicate).

7. Sa se studieze specificatia pentru generatorul de parser-e Bison. Sa se exemplifice pentru gramatica sintaxei unui limbaj/sublimbaj al unui limbaj de programare, la alegere.